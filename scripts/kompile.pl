#!/usr/bin/perl

# Common includes
use strict;
use warnings;
use Getopt::Long;
use File::Compare;
use File::Basename;
use File::chdir;
use Cwd;
use Cwd 'abs_path';

BEGIN {
    my $script_dir = dirname(__FILE__);
    unshift @INC, $script_dir;
}
use utils;
use kutils;
use File::Find;

# Using GetOPtions
my $script_path = dirname( abs_path($0) );
my $baseDir     = "$script_path/../semantics";
my $UTInstructionsPath = "$baseDir/underTestInstructions/";
my $help               = "";
my $backend            = "ocaml";
my $sfp;
my $removeComment;

GetOptions(
    "help"      => \$help,
    "backend:s" => \$backend,
) or die("Error in command line arguments\n");

if ( $help ne "" ) {
    print "Usage: kompile.pl [--backend java]\n";
    exit(0);
}

# Get current dir
my $current = getcwd();
$CWD = $baseDir;

execute("mkdir -p $UTInstructionsPath");
createSingleFileDefn();
execute("git status x86-instructions-semantics.k");
execute(
    "time  kompile x86-semantics.k --syntax-module X86-SYNTAX --main-module \\
    X86-SEMANTICS --emit-json --debug -v --backend $backend -I  -I ./ -I common/x86-config/", 1
);

$CWD = $current;
exit(0);

sub createSingleFileDefn {

    my $singleFile = "x86-instructions-semantics.k";
    open( $sfp, ">", $singleFile ) or die "Can't open: $!";
    $removeComment = 0;

    print $sfp "requires \"x86-configuration.k\"" . "\n";
    print $sfp "requires \"x86-flag-checks-syntax.k\"" . "\n\n";
    print $sfp "module X86-INSTRUCTIONS-SEMANTICS" . "\n";
    print $sfp "  imports X86-CONFIGURATION" . "\n";
    print $sfp "  imports X86-FLAG-CHECKS-SYNTAX" . "\n";

    print("\tMerging UTInstructionsPath\n");
    find( \&mergeToSingleFile, $UTInstructionsPath );

    $removeComment = 1;

    print $sfp "endmodule";
    close($sfp);

    return;
}

sub mergeToSingleFile {
    my $file = $_;
    if ( !( -f $file ) or ( $file !~ m/\.k$/ ) ) {
        return;
    }

    my $koutput = "$file";

    open( my $fp, "<", $koutput ) or die "Can't open ::$koutput\:: $!";
    my @lines = <$fp>;

    for my $line (@lines) {
        if ( $line =~ m/^module (.*)/ ) {
            print $sfp "// " . lc($1) . "\n";
            next;
        }
        if ( $line =~ m/imports/ ) {
            next;
        }
        if ( $line =~ m/^requires "(.*\.k)"/ ) {
            next;
        }
        if ( $line =~ m/Autogenerated/ ) {
            next;
        }
        if ( $line =~ m/endmodule/ ) {
            print $sfp "\n";
            if ( $removeComment == 1 ) {
                last;
            }
            else {
                next;
            }
        }
        print $sfp $line;
    }
}

