// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module VPSIGNB-XMM-XMM-XMM
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (vpsignb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 128, 136))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 136, 144))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 144, 152))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 152, 160))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 160, 168))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 168, 176))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 176, 184))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 184, 192))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 192, 200))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 200, 208))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 208, 216))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 216, 224))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 224, 232))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 232, 240))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 240, 248))) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 248, 256))) #fi) #fi)))))))))))))))))
)

    </regstate>
    
endmodule

module VPSIGNB-XMM-XMM-XMM-SEMANTICS
  imports VPSIGNB-XMM-XMM-XMM
endmodule
