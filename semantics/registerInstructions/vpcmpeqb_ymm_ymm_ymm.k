// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module VPCMPEQB-YMM-YMM-YMM
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (vpcmpeqb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 8), extractMInt( getParentValue(R1, RSMap), 0, 8)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 8, 16), extractMInt( getParentValue(R1, RSMap), 8, 16)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 16, 24), extractMInt( getParentValue(R1, RSMap), 16, 24)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 24, 32), extractMInt( getParentValue(R1, RSMap), 24, 32)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 40), extractMInt( getParentValue(R1, RSMap), 32, 40)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 40, 48)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 64, 72), extractMInt( getParentValue(R1, RSMap), 64, 72)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 72, 80), extractMInt( getParentValue(R1, RSMap), 72, 80)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 80, 88), extractMInt( getParentValue(R1, RSMap), 80, 88)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 88, 96), extractMInt( getParentValue(R1, RSMap), 88, 96)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 96, 104), extractMInt( getParentValue(R1, RSMap), 96, 104)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 104, 112), extractMInt( getParentValue(R1, RSMap), 104, 112)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 112, 120), extractMInt( getParentValue(R1, RSMap), 112, 120)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 120, 128), extractMInt( getParentValue(R1, RSMap), 120, 128)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then mi(8, 255) #else mi(8, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then mi(8, 255) #else mi(8, 0) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    
endmodule

module VPCMPEQB-YMM-YMM-YMM-SEMANTICS
  imports VPCMPEQB-YMM-YMM-YMM
endmodule
