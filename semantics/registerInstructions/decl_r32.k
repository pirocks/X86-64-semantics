// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module DECL-R32
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (decl R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( mi(32, 0), subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)))

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 24, 25), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) andBool eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 64), mi(31, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    
endmodule

module DECL-R32-SEMANTICS
  imports DECL-R32
endmodule
