// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module MULL-R32
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (mull R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 32, 64))

"RDX" |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 32))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 32), mi(32, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 32), mi(32, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    
endmodule

module MULL-R32-SEMANTICS
  imports MULL-R32
endmodule
