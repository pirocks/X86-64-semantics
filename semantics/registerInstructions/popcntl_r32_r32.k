// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module POPCNTL-R32-R32
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (popcntl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 33)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 33, 34)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 34, 35)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 35, 36)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 36, 37)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 37, 38)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 38, 39)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 39, 40)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 40, 41)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 41, 42)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 42, 43)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 43, 44)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 44, 45)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 45, 46)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 46, 47)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 47, 48)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 49)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 49, 50)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 50, 51)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 51, 52)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 52, 53)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 53, 54)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 54, 55)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 55, 56)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 57)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 57, 58)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 58, 59)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 59, 60)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 60, 61)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 61, 62)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 62, 63)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 63, 64))))))))))))

"CF" |-> mi(1, 0)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    
endmodule

module POPCNTL-R32-R32-SEMANTICS
  imports POPCNTL-R32-R32
endmodule
