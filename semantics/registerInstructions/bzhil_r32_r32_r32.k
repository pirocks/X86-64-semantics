// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module BZHIL-R32-R32-R32
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (bzhil R1:R32, R2:R32, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 31)) #then concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 33, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 30)) #then concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 34, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 29)) #then concatenateMInt( mi(3, 0), extractMInt( getParentValue(R2, RSMap), 35, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 28)) #then concatenateMInt( mi(4, 0), extractMInt( getParentValue(R2, RSMap), 36, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 27)) #then concatenateMInt( mi(5, 0), extractMInt( getParentValue(R2, RSMap), 37, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 26)) #then concatenateMInt( mi(6, 0), extractMInt( getParentValue(R2, RSMap), 38, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 25)) #then concatenateMInt( mi(7, 0), extractMInt( getParentValue(R2, RSMap), 39, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 24)) #then concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 40, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 23)) #then concatenateMInt( mi(9, 0), extractMInt( getParentValue(R2, RSMap), 41, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 22)) #then concatenateMInt( mi(10, 0), extractMInt( getParentValue(R2, RSMap), 42, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 21)) #then concatenateMInt( mi(11, 0), extractMInt( getParentValue(R2, RSMap), 43, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 20)) #then concatenateMInt( mi(12, 0), extractMInt( getParentValue(R2, RSMap), 44, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 19)) #then concatenateMInt( mi(13, 0), extractMInt( getParentValue(R2, RSMap), 45, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 18)) #then concatenateMInt( mi(14, 0), extractMInt( getParentValue(R2, RSMap), 46, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 17)) #then concatenateMInt( mi(15, 0), extractMInt( getParentValue(R2, RSMap), 47, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 16)) #then concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 15)) #then concatenateMInt( mi(17, 0), extractMInt( getParentValue(R2, RSMap), 49, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 14)) #then concatenateMInt( mi(18, 0), extractMInt( getParentValue(R2, RSMap), 50, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 13)) #then concatenateMInt( mi(19, 0), extractMInt( getParentValue(R2, RSMap), 51, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 12)) #then concatenateMInt( mi(20, 0), extractMInt( getParentValue(R2, RSMap), 52, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 11)) #then concatenateMInt( mi(21, 0), extractMInt( getParentValue(R2, RSMap), 53, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 10)) #then concatenateMInt( mi(22, 0), extractMInt( getParentValue(R2, RSMap), 54, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 9)) #then concatenateMInt( mi(23, 0), extractMInt( getParentValue(R2, RSMap), 55, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 8)) #then concatenateMInt( mi(24, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 7)) #then concatenateMInt( mi(25, 0), extractMInt( getParentValue(R2, RSMap), 57, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 6)) #then concatenateMInt( mi(26, 0), extractMInt( getParentValue(R2, RSMap), 58, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 5)) #then concatenateMInt( mi(27, 0), extractMInt( getParentValue(R2, RSMap), 59, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 4)) #then concatenateMInt( mi(28, 0), extractMInt( getParentValue(R2, RSMap), 60, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 3)) #then concatenateMInt( mi(29, 0), extractMInt( getParentValue(R2, RSMap), 61, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 2)) #then concatenateMInt( mi(30, 0), extractMInt( getParentValue(R2, RSMap), 62, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)) #then concatenateMInt( mi(31, 0), extractMInt( getParentValue(R2, RSMap), 63, 64)) #else mi(32, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))

"CF" |-> (#ifMInt ugeMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 31)) #then concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 33, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 30)) #then concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 34, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 29)) #then concatenateMInt( mi(3, 0), extractMInt( getParentValue(R2, RSMap), 35, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 28)) #then concatenateMInt( mi(4, 0), extractMInt( getParentValue(R2, RSMap), 36, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 27)) #then concatenateMInt( mi(5, 0), extractMInt( getParentValue(R2, RSMap), 37, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 26)) #then concatenateMInt( mi(6, 0), extractMInt( getParentValue(R2, RSMap), 38, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 25)) #then concatenateMInt( mi(7, 0), extractMInt( getParentValue(R2, RSMap), 39, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 24)) #then concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 40, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 23)) #then concatenateMInt( mi(9, 0), extractMInt( getParentValue(R2, RSMap), 41, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 22)) #then concatenateMInt( mi(10, 0), extractMInt( getParentValue(R2, RSMap), 42, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 21)) #then concatenateMInt( mi(11, 0), extractMInt( getParentValue(R2, RSMap), 43, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 20)) #then concatenateMInt( mi(12, 0), extractMInt( getParentValue(R2, RSMap), 44, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 19)) #then concatenateMInt( mi(13, 0), extractMInt( getParentValue(R2, RSMap), 45, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 18)) #then concatenateMInt( mi(14, 0), extractMInt( getParentValue(R2, RSMap), 46, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 17)) #then concatenateMInt( mi(15, 0), extractMInt( getParentValue(R2, RSMap), 47, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 16)) #then concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 15)) #then concatenateMInt( mi(17, 0), extractMInt( getParentValue(R2, RSMap), 49, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 14)) #then concatenateMInt( mi(18, 0), extractMInt( getParentValue(R2, RSMap), 50, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 13)) #then concatenateMInt( mi(19, 0), extractMInt( getParentValue(R2, RSMap), 51, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 12)) #then concatenateMInt( mi(20, 0), extractMInt( getParentValue(R2, RSMap), 52, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 11)) #then concatenateMInt( mi(21, 0), extractMInt( getParentValue(R2, RSMap), 53, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 10)) #then concatenateMInt( mi(22, 0), extractMInt( getParentValue(R2, RSMap), 54, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 9)) #then concatenateMInt( mi(23, 0), extractMInt( getParentValue(R2, RSMap), 55, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 8)) #then concatenateMInt( mi(24, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 7)) #then concatenateMInt( mi(25, 0), extractMInt( getParentValue(R2, RSMap), 57, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 6)) #then concatenateMInt( mi(26, 0), extractMInt( getParentValue(R2, RSMap), 58, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 5)) #then concatenateMInt( mi(27, 0), extractMInt( getParentValue(R2, RSMap), 59, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 4)) #then concatenateMInt( mi(28, 0), extractMInt( getParentValue(R2, RSMap), 60, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 3)) #then concatenateMInt( mi(29, 0), extractMInt( getParentValue(R2, RSMap), 61, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 2)) #then concatenateMInt( mi(30, 0), extractMInt( getParentValue(R2, RSMap), 62, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)) #then concatenateMInt( mi(31, 0), extractMInt( getParentValue(R2, RSMap), 63, 64)) #else mi(32, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then mi(1, 0) #else extractMInt( getParentValue(R2, RSMap), 32, 33) #fi)

"OF" |-> mi(1, 0)
)

    </regstate>
    
endmodule

module BZHIL-R32-R32-R32-SEMANTICS
  imports BZHIL-R32-R32-R32
endmodule
