// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module VPADDUSW-XMM-XMM-XMM
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (vpaddusw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 1, 17) #fi), (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 1, 17) #fi)))))))))
)

    </regstate>
    
endmodule

module VPADDUSW-XMM-XMM-XMM-SEMANTICS
  imports VPADDUSW-XMM-XMM-XMM
endmodule
