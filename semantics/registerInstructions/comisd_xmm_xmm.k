// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module COMISD-XMM-XMM
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (comisd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) orBool eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 2))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) orBool eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 3))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    
endmodule

module COMISD-XMM-XMM-SEMANTICS
  imports COMISD-XMM-XMM
endmodule
