// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module MULQ-R64
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (mulq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> extractMInt( mulMInt( concatenateMInt( mi(64, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(64, 0), getParentValue(%rax, RSMap))), 64, 128)

"RDX" |-> extractMInt( mulMInt( concatenateMInt( mi(64, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(64, 0), getParentValue(%rax, RSMap))), 0, 64)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(64, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(64, 0), getParentValue(%rax, RSMap))), 0, 64), mi(64, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(64, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(64, 0), getParentValue(%rax, RSMap))), 0, 64), mi(64, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    
endmodule

module MULQ-R64-SEMANTICS
  imports MULQ-R64
endmodule
