// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module VPADDSW-XMM-XMM-XMM
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (vpaddsw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 16, 32) #fi) #fi)))))))))
)

    </regstate>
    
endmodule

module VPADDSW-XMM-XMM-XMM-SEMANTICS
  imports VPADDSW-XMM-XMM-XMM
endmodule
