// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module IMULQ-R64
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (imulq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R1, RSMap))), mi(128, svalueMInt(getParentValue(%rax, RSMap)))), 64, 128)

"RDX" |-> extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R1, RSMap))), mi(128, svalueMInt(getParentValue(%rax, RSMap)))), 0, 64)

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(128, svalueMInt(getParentValue(R1, RSMap))), mi(128, svalueMInt(getParentValue(%rax, RSMap)))), mi(128, svalueMInt(extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R1, RSMap))), mi(128, svalueMInt(getParentValue(%rax, RSMap)))), 64, 128))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(128, svalueMInt(getParentValue(R1, RSMap))), mi(128, svalueMInt(getParentValue(%rax, RSMap)))), mi(128, svalueMInt(extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R1, RSMap))), mi(128, svalueMInt(getParentValue(%rax, RSMap)))), 64, 128))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    
endmodule

module IMULQ-R64-SEMANTICS
  imports IMULQ-R64
endmodule
