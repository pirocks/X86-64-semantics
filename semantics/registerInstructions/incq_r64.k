// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module INCQ-R64
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (incq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> addMInt( getParentValue(R1, RSMap), mi(64, 1))

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 56, 57), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 15)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 0, 1)

"OF" |-> (#ifMInt ((notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1))) andBool eqMInt( extractMInt( getParentValue(R1, RSMap), 1, 64), mi(63, 18446744073709551615))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    
endmodule

module INCQ-R64-SEMANTICS
  imports INCQ-R64
endmodule
