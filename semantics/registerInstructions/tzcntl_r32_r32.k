// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module TZCNTL-R32-R32
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (tzcntl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(64, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(64, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(64, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(64, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(64, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(64, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(64, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(64, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(64, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(64, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(64, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(64, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(64, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(64, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(64, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(64, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(64, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(64, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(64, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(64, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(64, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(64, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(64, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(64, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(64, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(64, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(64, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(64, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(64, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(64, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(64, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(64, 31) #else mi(64, 32) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi)

"CF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(32, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(32, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(32, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(32, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(32, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(32, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(32, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(32, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(32, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(32, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(32, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(32, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(32, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(32, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(32, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(32, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(32, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(32, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(32, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(32, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(32, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(32, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(32, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(32, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(32, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(32, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(32, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(32, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(32, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(32, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(32, 31) #else mi(32, 32) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(32, 32)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(32, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(32, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(32, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(32, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(32, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(32, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(32, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(32, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(32, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(32, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(32, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(32, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(32, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(32, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(32, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(32, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(32, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(32, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(32, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(32, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(32, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(32, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(32, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(32, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(32, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(32, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(32, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(32, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(32, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(32, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(32, 31) #else mi(32, 32) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    
endmodule

module TZCNTL-R32-R32-SEMANTICS
  imports TZCNTL-R32-R32
endmodule
