// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module VPSUBUSB-XMM-XMM-XMM
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (vpsubusb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), 2, 10) #fi) #fi), (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), 2, 10) #fi) #fi)))))))))))))))))
)

    </regstate>
    
endmodule

module VPSUBUSB-XMM-XMM-XMM-SEMANTICS
  imports VPSUBUSB-XMM-XMM-XMM
endmodule
