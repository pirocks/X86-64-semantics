// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module NEGW-R16
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (negw R1:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 15, 16), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 9, 10), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 8, 9), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 11, 12), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    
endmodule

module NEGW-R16-SEMANTICS
  imports NEGW-R16
endmodule
