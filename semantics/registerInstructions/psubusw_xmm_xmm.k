// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module PSUBUSW-XMM-XMM
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (psubusw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 2, 18) #fi) #fi), (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 2, 18) #fi) #fi)))))))))
)

    </regstate>
    
endmodule

module PSUBUSW-XMM-XMM-SEMANTICS
  imports PSUBUSW-XMM-XMM
endmodule
