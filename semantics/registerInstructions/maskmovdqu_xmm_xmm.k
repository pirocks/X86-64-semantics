// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module MASKMOVDQU-XMM-XMM
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (maskmovdqu:Opcode R1:Xmm, R2:Xmm,  .Operands) => execinstr (maskmovdqu:Opcode R1:Xmm, R2:Xmm, getRegisterValue(R1, RSMap), getRegisterValue(R2, RSMap), mi(8, 1), .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>

    
      
  rule <k>
    execinstr (maskmovdqu:Opcode R1:Xmm, R2:Xmm, Val1:MInt, Val2:MInt, Count:MInt, .Operands) => 
      storeToMemory(extractMInt(Val2, 128 -Int uvalueMInt(Count) *Int 8,  128 -Int uvalueMInt(Count) *Int 8 +Int 8), addMInt(getRegisterValue(%rdi, RSMap), subMInt(Count, mi(8, 1))), 8) 
      ~> execinstr (maskmovdqu:Opcode R1:Xmm, R2:Xmm, Val1:MInt, Val2:MInt, addMInt(Count, mi(8, 1)), .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
      requires eqMInt(extractMInt(Val1, 128 -Int uvalueMInt(Count) *Int 8, 128 -Int uvalueMInt(Count) *Int 8 +Int 1), mi(1, 1))
      andBool notBool eqMInt(Count, mi(8, 16))

  rule <k>
    execinstr (maskmovdqu:Opcode R1:Xmm, R2:Xmm, Val1:MInt, Val2:MInt, Count:MInt, .Operands) => 
      execinstr (maskmovdqu:Opcode R1:Xmm, R2:Xmm, Val1:MInt, Val2:MInt, addMInt(Count, mi(8, 1)), .Operands)
  ...</k>
    <regstate> RSMap:Map </regstate>
      requires eqMInt(extractMInt(Val1, 128 -Int uvalueMInt(Count) *Int 8, 128 -Int uvalueMInt(Count) *Int 8 +Int 1), mi(1, 0))
      andBool notBool eqMInt(Count, mi(8, 16))



  rule <k>
    execinstr (maskmovdqu:Opcode R1:Xmm, R2:Xmm, Val1:MInt, Val2:MInt, Count:MInt, .Operands) => 
      storeToMemory(extractMInt(Val2, 128 -Int uvalueMInt(Count) *Int 8,  128 -Int uvalueMInt(Count) *Int 8 +Int 8), addMInt(getRegisterValue(%rdi, RSMap), subMInt(Count, mi(8, 1))), 8) 
      
  ...</k>
    <regstate> RSMap:Map </regstate>
      requires eqMInt(extractMInt(Val1, 128 -Int uvalueMInt(Count) *Int 8, 128 -Int uvalueMInt(Count) *Int 8 +Int 1), mi(1, 1))
      andBool  eqMInt(Count, mi(8, 16))

  rule <k>
    execinstr (maskmovdqu:Opcode R1:Xmm, R2:Xmm, Val1:MInt, Val2:MInt, Count:MInt, .Operands) => .
     
  ...</k>
    <regstate> RSMap:Map </regstate>
      requires eqMInt(extractMInt(Val1, 128 -Int uvalueMInt(Count) *Int 8, 128 -Int uvalueMInt(Count) *Int 8 +Int 1), mi(1, 0))
      andBool  eqMInt(Count, mi(8, 16))
endmodule
