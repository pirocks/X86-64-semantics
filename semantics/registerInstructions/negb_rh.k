// Autogenerated using stratification.
requires "x86-configuration.k"
requires "x86-flag-checks.k"
module NEGB-RH
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS
  rule <k>
    execinstr (negb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56)))), extractMInt( getParentValue(R1, RSMap), 56, 64))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 3, 4), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    
endmodule

module NEGB-RH-SEMANTICS
  imports NEGB-RH
endmodule
